require('dotenv').config({ path: './config.env' });
const fs = require("fs");
const chalk = require("chalk");
const { downloadContentFromMessage } = require("@whiskeysockets/baileys");

module.exports = {
  name: "nice",
  execute: async (sock, msg, args) => {
    const groupId = msg.key.remoteJid;
    const ownerNumber = `${process.env.OWNER_NUMBER}@s.whatsapp.net` // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Owner ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¨‡¶∏‡¶æ‡¶ì

    try {
      const quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
      if (!quotedMsg || (!quotedMsg.imageMessage && !quotedMsg.videoMessage)) {
        await sock.sendMessage(groupId, { text: '‚ùå ‡¶™‡ßç‡¶≤‡¶ø‡¶ú ‡¶∂‡ßÅ‡¶ß‡ßÅ View Once ‡¶´‡¶ü‡ßã ‡¶¨‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶§‡ßá `.vv` ‡¶¶‡¶ø‡¶®!' });
        return;
      }

      console.log(chalk.yellowBright('üîç Checking for View Once media...'));

      const mediaType = quotedMsg.imageMessage ? 'image' : 'video';
      const stream = await downloadContentFromMessage(quotedMsg[mediaType + 'Message'], mediaType);
      let buffer = Buffer.from([]);

      for await (const chunk of stream) {
        buffer = Buffer.concat([buffer, chunk]);
      }

      if (!buffer.length) {
        await sock.sendMessage(groupId, { text: '‚ùå ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ!' });
        return;
      }

      const fileName = `view_once_${Date.now()}.${mediaType === 'image' ? 'jpg' : 'mp4'}`;
      fs.writeFileSync(fileName, buffer);

      // ‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Æ‡¶ø‡¶°‡¶ø‡ßü‡¶æ Owner-‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
      await sock.sendMessage(ownerNumber, {
        [mediaType]: { url: fileName },
        caption: `üîì *View Once ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶â‡¶¶‡ßç‡¶ß‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!*`
      });

      fs.unlinkSync(fileName);
      console.log(chalk.greenBright(`‚úÖ View Once ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ${ownerNumber} ‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!`));
      await sock.sendMessage(groupId, { text: `This command only can use admin` });

    } catch (error) {
      console.error(chalk.red('‚ùå View Once ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!'), error);
      await sock.sendMessage(groupId, { text: '‚ùå ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∞‡¶ø‡¶ï‡¶≠‡¶æ‡¶∞‡¶ø ‡¶´‡ßá‡¶á‡¶≤‡¶°!' });
    }
  }
};