const fs = require('fs');
const path = require('path');

// Antilink ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶´‡¶æ‡¶á‡¶≤
const dataPath = path.join(__dirname, 'data', 'antilink.json');

// ‡¶∏‡ßá‡¶≠ ‡¶è‡¶¨‡¶Ç ‡¶≤‡ßã‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function loadAntilinkSettings() {
    if (fs.existsSync(dataPath)) {
        const data = fs.readFileSync(dataPath, 'utf-8');
        return JSON.parse(data);
    }
    return {};
}

function saveAntilinkSettings(settings) {
    fs.writeFileSync(dataPath, JSON.stringify(settings, null, 2));
}

function setAntilinkSetting(groupId, setting) {
    const settings = loadAntilinkSettings();
    settings[groupId] = setting;
    saveAntilinkSettings(settings);
}

function getAntilinkSetting(groupId) {
    const settings = loadAntilinkSettings();
    return settings[groupId] || 'off';
}

module.exports = {
    name: 'antilink',
    description: 'Prevent unwanted link spam in group',
    execute: async (sock, msg, args) => {
        const groupId = msg.key.remoteJid;

        const groupMetadata = await sock.groupMetadata(groupId);
        const sender = msg.key.participant || msg.key.remoteJid;
        const senderAdmin = groupMetadata.participants.find(p => p.id === sender)?.admin;

        if (!senderAdmin) {
            await sock.sendMessage(groupId, { text: '‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ‡¶á ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§' });
            return;
        }

        const subCommand = args[0]?.toLowerCase();
        if (!subCommand) {
            const help = `üîí *Antilink Commands:*
‚Ä¢ .antilink off - ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ .antilink whatsapp - WhatsApp ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßç‡¶≤‡¶ï
‚Ä¢ .antilink whatsappchannel - WhatsApp ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßç‡¶≤‡¶ï
‚Ä¢ .antilink telegram - Telegram ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßç‡¶≤‡¶ï
‚Ä¢ .antilink all - ‡¶∏‡¶¨ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßç‡¶≤‡¶ï`;
            return sock.sendMessage(groupId, { text: help });
        }

        switch (subCommand) {
            case 'off':
                setAntilinkSetting(groupId, 'off');
                await sock.sendMessage(groupId, { text: '‚úÖ Antilink ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§' });
                break;
            case 'whatsapp':
                setAntilinkSetting(groupId, 'whatsappGroup');
                await sock.sendMessage(groupId, { text: '‚úÖ WhatsApp ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶è‡¶ñ‡¶® ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§' });
                break;
            case 'whatsappchannel':
                setAntilinkSetting(groupId, 'whatsappChannel');
                await sock.sendMessage(groupId, { text: '‚úÖ WhatsApp ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶è‡¶ñ‡¶® ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§' });
                break;
            case 'telegram':
                setAntilinkSetting(groupId, 'telegram');
                await sock.sendMessage(groupId, { text: '‚úÖ Telegram ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶è‡¶ñ‡¶® ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§' });
                break;
            case 'all':
                setAntilinkSetting(groupId, 'allLinks');
                await sock.sendMessage(groupId, { text: '‚úÖ ‡¶∏‡¶¨ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶è‡¶ñ‡¶® ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§' });
                break;
            default:
                await sock.sendMessage(groupId, { text: '‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡•§ .antilink ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶π‡ßá‡¶≤‡ßç‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§' });
        }
    },

    // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ö‡ßá‡¶ï ‡¶ì ‡¶Æ‡ßÅ‡¶õ‡¶æ
    onMessage: async (sock, msg) => {
        const groupId = msg.key.remoteJid;
        if (!groupId.endsWith('@g.us')) return;

        const setting = getAntilinkSetting(groupId);
        if (setting === 'off') return;

        const senderId = msg.key.participant || msg.key.remoteJid;
        const body = msg.message?.conversation || msg.message?.extendedTextMessage?.text;
        if (!body) return;

        const linkPatterns = {
            whatsappGroup: /chat\.whatsapp\.com\/[A-Za-z0-9]{20,}/,
            whatsappChannel: /wa\.me\/channel\/[A-Za-z0-9]{20,}/,
            telegram: /t\.me\/[A-Za-z0-9_]+/,
            allLinks: /https?:\/\/[^\s]+/,
        };

        let shouldDelete = false;

        if (
            (setting === 'whatsappGroup' && linkPatterns.whatsappGroup.test(body)) ||
            (setting === 'whatsappChannel' && linkPatterns.whatsappChannel.test(body)) ||
            (setting === 'telegram' && linkPatterns.telegram.test(body)) ||
            (setting === 'allLinks' && linkPatterns.allLinks.test(body))
        ) {
            shouldDelete = true;
        }

        if (shouldDelete) {
            try {
                await sock.sendMessage(groupId, {
                    delete: {
                        remoteJid: groupId,
                        fromMe: false,
                        id: msg.key.id,
                        participant: senderId
                    }
                });

                await sock.sendMessage(groupId, {
                    text: `‚ö†Ô∏è @${senderId.split('@')[0]}, ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß!`,
                    mentions: [senderId]
                });
            } catch (err) {
                console.error('‚ùå ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•:', err);
            }
        }
    }
};